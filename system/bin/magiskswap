#!/system/bin/sh

#  This module allows for creating a persistent swap space on android 
#  Copyright (C) 2025 chickendrop89
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

COMMAND="$1";
VALUE=$2;
OPTIONALVALUE="$3";

# Import common functions from file
. "$MODPATH/common.sh";

# Abort - Print message and exit
abort(){ 
    cprint "$1"
    exit 1
}

# Function to check available space in gigabytes
checkFreeSpace() {
  REQUIRED_SPACE="$1"

  # The DiskFree binary on android is very neutered, and is missing some flags such as --ouput=avail
  # Use awk to strip the "Available" and "G" from the string, and then finally round the number
  AVAILABLE_SPACE=$(df -h "$MODPATH" | awk 'NR==2 {gsub(/Available\n/,""); sub(/G$/,""); print int($4)}')

  # Check if required space is less than or equal to available space
  if [ "$REQUIRED_SPACE" -gt "$AVAILABLE_SPACE" ]; 
    then
        abort "insufficient space ($AVAILABLE_SPACE GB available)"
  fi
}

# Create swapfile and swaps-on
createSwapSpace(){
    SIZE="$1";
    PRIORITY="$2";

    # If priority parameter is specified, use it when swapping-on
    if [ -z "$PRIORITY" ];
        then
            unset PRIORITY
            modifyProp SWAP-PRIORITY false
        else
            cprint "swap will have ($PRIORITY) priority"
            modifyProp SWAP-PRIORITY "$PRIORITY"
            PRIORITY="-p $PRIORITY"
    fi

    # If the swapfile was preserved, and doesn't need to be recreated
    if [ "$VALUE" = "preserve" ];
        then
            if ! [ -f "$SWAPFILE" ];
                then abort "no existing swapfile"

            elif [ "$(readProp "ENABLE-SWAP")" = true ];
                then abort "swapfile exists and is currently mounted"
            fi
        else
            # 1 Gigabyte = 1,048,576 Kilobytes
            SIZE_KB="$((SIZE * 1048576))";

            cprint "creating $SIZE GB swapfile"
            checkFreeSpace "$SIZE"

            if [ -f "$SWAPFILE" ];
                then
                    cprint "swap-off and delete existing swapfile"
                    swapoff "$SWAPFILE"
                    rm -rf "$SWAPFILE" || abort "cannot remove swapfile!"
            fi

            dd if=/dev/zero of="$SWAPFILE" bs=1024 count="$SIZE_KB" 1>/dev/null

            cprint "preparing swapfile"
            mkswap "$SWAPFILE" 1>/dev/null

            chmod 600 "$SWAPFILE"
            chown root:root "$SWAPFILE"
    fi

    # Use the toybox version of the "swapon" applet as it has the priority switch
    cprint "mounting swapfile (It will take a while)"

        # shellcheck disable=SC2086
        toybox swapon $PRIORITY $SWAPFILE

    modifyProp ENABLE-SWAP true
    cprint "(mss) has been enabled"
}

case $COMMAND in
    "create")
        # OPTIONALVALUE parameters
        if [ -n "$OPTIONALVALUE" ] && ! echo "$OPTIONALVALUE" | grep -q -E '^[0-9]+$';
            then abort "PRIORITY parameter must be a number (0-32767)"

        elif [ -n "$OPTIONALVALUE" ] && [ ! "$OPTIONALVALUE" -ge 0 ] || [ ! "$OPTIONALVALUE" -le 32767 ];
            then abort "PRIORITY parameter is not in range (0-32767)"
        fi

        # VALUE parameters
        if [ "$VALUE" = "preserve" ];
            then createSwapSpace "preserve" "$OPTIONALVALUE" 2>/dev/null

        elif [ -n "$VALUE" ] && ! echo "$VALUE" | grep -q -E '^[0-9]+$';
            then abort "VALUE parameter must be a number (1-100)"

        elif [ -n "$VALUE" ] && [ "$VALUE" -ge 1 ] && [ "$VALUE" -le 100 ];
            then createSwapSpace "$VALUE" "$OPTIONALVALUE" 2>/dev/null
            else abort "VALUE parameter is missing, or not in range (1-100)"
        fi
    ;; 
    "remove")
        if [ "$VALUE" = "preserve" ];
            then
                cprint "swap-off, but preserve the swapfile"
                swapoff "$SWAPFILE"
            else
                cprint "swap-off, and remove swapfile"
                swapoff "$SWAPFILE"
                rm -rf "$SWAPFILE" || abort "cannot remove swapfile!"
        fi

        modifyProp ENABLE-SWAP false
        modifyProp SWAP-PRIORITY false
        cprint "(mss) has been disabled"
    ;;
    "status")
        if [ "$VALUE" = "swapon" ];
            then
                cprint "performing a swap-on operation"

                if toybox swapon "$SWAPFILE";
                    then cprint "successfully performed a swap-on operation";
                    else cprint "couldn't swap-on, maybe it's already mounted?";
                fi

                cprint "(hint): temporarily swap-off using (\"magiskswap status swapoff\")"
            return

        elif [ "$VALUE" = "swapoff" ];
            then
                cprint "performing a temporary swap-off operation"
 
                if toybox swapoff "$SWAPFILE";
                    then cprint "successfully performed a temporary swap-off operation";
                    else cprint "couldn't swap-off, maybe it's already dismounted?";
                fi

                cprint "(hint): swap-on using (\"magiskswap status swapon\")"
            return
        fi

        if [ "$(readProp ENABLE-SWAP)" = "true" ];
            then 
                cprint "(mss) is enabled with with $(du -sh "$SWAPFILE" | awk '{ print $1 }')"
                printf "\n%s\n" "$(cat /proc/swaps || return)"
            else 
                cprint "(mss) is not configured/disabled"
        fi
    ;;
    "swappiness")
        SWAPPINESS_BACKUP="$(readProp BACKUP-SWAP)"
        CURRENT_SWAPPINESS="$(sysctl -n "$SWAPPINESS_SYSCTL_ENTRY")"

        if [ "$VALUE" = "show" ];
            then
                if [ "$SWAPPINESS_BACKUP" ];
                    then cprint "original/default VM swappiness: $SWAPPINESS_BACKUP"
                fi

                cprint "current VM swappiness: $CURRENT_SWAPPINESS"
            return

        elif [ "$VALUE" = "reset" ];
            then
                if [ "$SWAPPINESS_BACKUP" ];
                    then
                        cprint "swappiness has been set to the old value"
                        setKernelTune "$SWAPPINESS_SYSCTL_ENTRY" "$SWAPPINESS_BACKUP"

                        # Delete Backup and the property itself
                        deleteProp "BACKUP-SWAP"
                        deleteProp "SWAPPINESS"
                    else
                        abort "no backup was set yet, swappiness is unmodified"
                fi
            return
        fi

        if [ -n "$VALUE" ] && ! echo "$VALUE" | grep -q -E '^[0-9]+$';
            then abort "VALUE parameter must be a number (0-200)"

        elif [ "$VALUE" -ge 0 ] && [ "$VALUE" -le 200 ];
            then
                if [ "$VALUE" -eq 0 ];
                    then
                        cprint "WARNING: Setting swappiness to 0 stops swapping to disk completely"
                        cprint "WARNING: Use this with caution, as OOM situations might occur"
                fi

                # Backup first, so the value can be reset without needing a reboot
                modifyProp "BACKUP-SWAP" "$(sysctl -n "$SWAPPINESS_SYSCTL_ENTRY")"

                cprint "swappiness has been set to $VALUE"
                setKernelTune "$SWAPPINESS_SYSCTL_ENTRY" "$VALUE"
                modifyProp "SWAPPINESS" "$VALUE"
            else
                abort "VALUE is missing, or not in range (0-200)"
        fi
    ;;
    *)
        cat << EOT

magisk-swapspace by chickendrop89 â“’ GPLv3 license
usage: magiskswap <COMMAND> <VALUE> [OPTIONAL]

create <size: GB> [priority] [preserve]
  - Creates swapfile and swaps-on
    (?) [preserve] option enables the previously disabled swapfile

remove [preserve]
  - Permanently swaps-off and deletes swapfile
    (?) [preserve] option only disables it

status [swapon] [swapoff]
  - Prints swapfile size and status

swappiness <0-200> [show] [reset]
  - Controls how agressively Linux swaps anonymous memory

() These commands are presistent across reboots ()

EOT
    ;;
esac