#!/system/bin/sh

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Copyright (C) 2024  chickendrop89

NAME="$1";
VALUE=$2;
OPTIONALVALUE="$3";

# Import common functions from file
. "/data/adb/modules/magisk-swapspace/common.sh";

# Abort - Print message and exit
abort(){ 
    cprint "$1";

    # If the second parameter is 'rm', delete swap
    if [ "$2" = "rm" ];
        then rm -rf "$SWAPFILE"
    fi 

    exit 1
}

# Create swapfile and swaps-on
createSwapSpace(){
    COUNT="$1";
    PRIORITY="$2";

    # If priority parameter is specified, use it when swapping-on
    if [ -z "$PRIORITY" ];
        then
            unset PRIORITY
            modifyProp SWAP-PRIORITY false
        else
            cprint "swap will have ($PRIORITY) priority"
            modifyProp SWAP-PRIORITY "$PRIORITY"
            PRIORITY="-p $PRIORITY"
    fi

    if ! [ "$VALUE" = "keep" ];
        then
            COUNT_KB="$(expr "$COUNT" \* 1000000)";

            cprint "swap-off and delete existing swapfile"
                swapoff "$SWAPFILE"
                rm -rf "$SWAPFILE" || abort "cannot remove swapfile!"

            cprint "create $COUNT GB swapfile"
                dd if=/dev/zero of="$SWAPFILE" bs=1024 count="$COUNT_KB" 1>/dev/null

            cprint "setting-up swapfile"
                mkswap "$SWAPFILE" 1>/dev/null
                chown root:root "$SWAPFILE"
        else
            if [ $(readProp "ENABLE-SWAP") = true ];
                then
                    abort "already enabled"
            fi 
            if ! [ -f $SWAPFILE ];
                then
                    abort "no existing swapfile"
            fi
    fi

    # Use the toybox version of the "swapon" applet as it has the priority switch
    cprint "loading swapfile (It will take a while)"
        toybox swapon $PRIORITY $SWAPFILE

    modifyProp ENABLE-SWAP true
    cprint "(mss) has been enabled"

    # Exit the script and stop execution of later code
    exit 0
}

case $NAME in
    "add")
        if [ -n "$OPTIONALVALUE" ] && [ ! "$OPTIONALVALUE" -ge 0 ] || [ ! "$OPTIONALVALUE" -le 32767 ];
            then
                abort "(priority) is not in range (0-32767)"
        fi
        if [ "$VALUE" = "keep" ];
            then
                createSwapSpace "keep" "$OPTIONALVALUE" 2>/dev/null 
        fi
        if [ -z "$VALUE" ];
            then 
                abort "VALUE parameter is missing, or does not contain a number!"
            else 
                createSwapSpace "$VALUE" "$OPTIONALVALUE" 2>/dev/null
        fi
    ;;
    "remove")
        if [ "$VALUE" = "keep" ];
            then
                cprint "swap-off, but keep the swapfile"
                    swapoff "$SWAPFILE"
            else
                cprint "swap-off, and remove swapfile"
                    swapoff "$SWAPFILE"
                    rm -rf "$SWAPFILE" || abort "cannot remove swapfile!"
        fi

        modifyProp ENABLE-SWAP false
        modifyProp SWAP-PRIORITY false
        cprint "(mss) has been disabled"
    ;;
    "status")
        if [ "$VALUE" = "swapon" ];
            then
                if toybox swapon "$SWAPFILE";
                    then cprint "successfully performed a swap-on operation";
                    else cprint "couldn't swap-on, maybe it's already mounted?";
                fi

                cprint "(hint): temporarily swap-off using (\"magiskswap status swapoff\")"

        elif [ "$VALUE" = "swapoff" ];
            then
                if toybox swapon "$SWAPFILE";
                    then cprint "successfully performed a temporary swap-off operation";
                    else cprint "couldn't swap-off, maybe it's already dismounted?";
                fi

                cprint "(Hint): swap-on using (\"magiskswap status swapon\")"
        fi

        if [ "$(readProp ENABLE-SWAP 2>/dev/null)" = "true" ];
            then 
                cprint "(mss) is enabled with with $(du -sh "$SWAPFILE" | awk '{ print $1 }')" 2>/dev/null
                printf "\n%s\n" "$(cat /proc/swaps || return)"
            else 
                cprint "(mss) is not configured/disabled"
        fi
    ;;
    "swappiness")
        SWAPPINESS_BACKUP="$(readProp "BACKUP-SWAP")"
        CURRENT_SWAPPINESS="$(cat "$SWAPPINESS_SYSPATH")"

        if [ "$VALUE" = "show" ];
            then
                if [ "$SWAPPINESS_BACKUP" ];
                    then cprint "original/default VM swappiness: $SWAPPINESS_BACKUP"
                fi

                cprint "current VM swappiness: $CURRENT_SWAPPINESS"
            return
        fi
        if [ "$VALUE" = "reset" ];
            then
                cprint "swappiness has been set to the old value"
                    setKernelTune "$SWAPPINESS_SYSPATH" "$SWAPPINESS_BACKUP"

                # Delete Backup and the property itself
                deleteProp "BACKUP-SWAP"
                deleteProp "SWAPPINESS"
            return
        fi
        if [ "$VALUE" -ge 1 ] && [ "$VALUE" -le 200 ];
            then
                if [ "$VALUE" -gt 100 ];
                    then cprint "WARNING: +100 swappiness is only compatible with Linux 5.7 and later"
                         cprint "WARNING: and might cause excessive battery drain and storage wear"
                fi

                # Backup first, so the value can be reset without needing a reboot
                modifyProp "BACKUP-SWAP" "$(cat "$SWAPPINESS_SYSPATH")"

                cprint "swappiness has been set to $VALUE"
                    setKernelTune "$SWAPPINESS_SYSPATH" "$VALUE"
                    modifyProp "SWAPPINESS" "$VALUE"
            else
                abort "VALUE is not in range (1-200)"
        fi
    ;;
    "vfs-cache-pressure")
        VFS_CACHE_PRESSURE_BACKUP="$(readProp "BACKUP-VFS")"
        CURRENT_VFS_CACHE_PRESSURE="$(cat "$VFS_CACHE_PRESSURE_SYSPATH")"

        if [ "$VALUE" = "show" ];
            then
                if [ "$VFS_CACHE_PRESSURE_BACKUP" ];
                    then cprint "original/default VM swappiness: $VFS_CACHE_PRESSURE_BACKUP"
                fi

                cprint "current virtual memory swappiness: $CURRENT_VFS_CACHE_PRESSURE"
            return
        fi
        if [ "$VALUE" = "reset" ];
            then
                cprint "VFS Cache Pressure has been reset to the old value"
                    setKernelTune "$VFS_CACHE_PRESSURE_SYSPATH" "$VFS_CACHE_PRESSURE_BACKUP"

                # Delete Backup and the property itself
                deleteProp "BACKUP-VFS"
                deleteProp "VFS-CACHE-PRESSURE"
            return
        fi
        if [ "$VALUE" -ge 1 ];
            then
                 # Backup first, so the value can be reset without needing a reboot
                modifyProp "BACKUP-VFS" "$(cat "$VFS_CACHE_PRESSURE_SYSPATH")"

                cprint "VFS Cache Pressure has been set to $VALUE"
                    setKernelTune "$VFS_CACHE_PRESSURE_SYSPATH" "$VALUE"
                    modifyProp "VFS-CACHE-PRESSURE" "$VALUE"
            else
                abort "VALUE is not in range (1-∞)"
        fi
    ;;
    *)
        cat << EOT

magisk-swapspace by chickendrop89
usage: magiskswap <NAME> <VALUE> [OPTIONAL]

add <size in GB> [priority] [keep]
  - Creates swapfile and swaps-on

remove [keep]   
  - Permanently swaps-off and deletes swapfile

status [swapon] [swapoff]
  - Prints swapfile size and status

swappiness <1-200> [show] [reset]
  - Controls how agressively Linux swaps anonymous memory

vfs-cache-pressure <1-∞> [show] [reset] 
  - Controls the tendency of the kernel to reclaim the memory

Notes:
- [remove keep, add keep]: 
 Instead of deleting, swap-off permanently but keep the file,
 Later, use "magiskswap add keep" to use the old swapfile

EOT
    ;;
esac